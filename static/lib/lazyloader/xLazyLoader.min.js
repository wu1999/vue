(function ($) {
    $.xLazyLoader = function (method, options) {
        if (typeof method == "object") {
            options = method;
            method = "init"
        }
        new xLazyLoader()[method](options)
    };
    $.xLazyLoader.defaults = {
        js: [],
        css: [],
        img: [],
        jsKey: null,
        cssKey: null,
        imgKey: null,
        name: null,
        timeout: 20000,
        success: $.noop,
        error: $.noop,
        complete: $.noop,
        each: $.noop
    };
    var head = document.getElementsByTagName("head")[0];

    function xLazyLoader() {
        var self = this,
            s, loaded = [],
            errors = [],
            tTimeout, cssTimeout, toLoad, files = [];
        this.init = function (options) {
            if (!options) {
                return
            }
            s = $.extend({}, $.xLazyLoader.defaults, options);
            toLoad = {
                js: s.js,
                css: s.css,
                img: s.img
            };
            $.each(toLoad, function (type, f) {
                if (typeof f == "string") {
                    f = f.split(",")
                }
                files = files.concat(f)
            });
            if (!files.length) {
                dispatchCallbacks("error");
                return
            }
            if (s.timeout) {
                tTimeout = setTimeout(function () {
                    var handled = loaded.concat(errors);
                    $.each(files, function (i, file) {
                        $.inArray(file, handled) == -1 && errors.push(file)
                    });
                    dispatchCallbacks("error")
                }, s.timeout)
            }
            $.each(toLoad, function (type, urls) {
                if ($.isArray(urls)) {
                    $.each(urls, function (i, url) {
                        load(type, url)
                    })
                } else {
                    if (typeof urls == "string") {
                        load(type, urls)
                    }
                }
            })
        };
        this.js = function (src, callback, name, key) {
            if ($.isPlainObject(src)) {
                var option = src;
                src = option.src;
                callback = option.callback || $.noop;
                name = option.name || '';
                key = option.key || '';
            }
            var $script = $('script[src*="' + src + '"]');
            if ($script.length) {
                $script.attr("pending") ? $script.bind("scriptload", callback) : callback();
                return
            }
            var s = document.createElement("script");
            s.setAttribute("type", "text/javascript");
            s.setAttribute("charset", "UTF-8");
            s.setAttribute("src", src + key);
            s.setAttribute("id", name);
            s.setAttribute("pending", 1);
            s.onerror = addError;
            $(s).bind("scriptload", function () {
                $(this).removeAttr("pending");
                callback();
                setTimeout(function () {
                    $(s).unbind("scriptload")
                }, 10)
            });
            var done = false;
            s.onload = s.onreadystatechange = function () {
                if (!done && (!this.readyState || /loaded|complete/.test(this.readyState))) {
                    done = true;
                    s.onload = s.onreadystatechange = null;
                    $(s).trigger("scriptload")
                }
            };
            head.appendChild(s)
        };
        this.css = function (href, callback, name, key) {
            if ($('link[href*="' + href + '"]').length) {
                callback();
                return
            }
            var link = document.createElement("link");
            link.setAttribute("rel", "stylesheet");
            link.setAttribute("type", "text/css");
            link.setAttribute("media", "all");
            link.setAttribute("href", href + key);
            link.setAttribute("id", name);
            if (navigator.userAgent.indexOf("MSIE") != -1) {
                link.onreadystatechange = function () {
                    if (link.readyState == "loaded" || link.readyState == "complete") {
                        link.onreadystatechange = null;
                        callback()
                    }
                }
            } else {
                if (navigator.userAgent.indexOf("Opera") != -1) {
                    link.onload = callback
                } else {
                    var hostname = location.hostname.replace("www.", ""),
                        hrefHostname = /http:/.test(href) ? /^(\w+:)?\/\/([^\/?#]+)/.exec(href)[2] : hostname;
                    hostname != hrefHostname && navigator.userAgent.indexOf("Firefox") != -1 ? callback() : (function () {
                        try {
                            link.sheet.cssRules
                        } catch (e) {
                            cssTimeout = setTimeout(arguments.callee, 20);
                            return
                        }
                        callback()
                    })()
                }
            }
            head.appendChild(link)
        };
        this.img = function (src, callback, name, key) {
            var img = new Image();
            img.onload = callback;
            img.onerror = addError;
            img.src = src + key
        };
        this.disable = function (name) {
            $("#lazy-loaded-" + name, head).attr("disabled", "disabled")
        };
        this.enable = function (name) {
            $("#lazy-loaded-" + name, head).removeAttr("disabled")
        };
        this.destroy = function (name) {
            $("#lazy-loaded-" + name, head).remove()
        };

        function load(type, url) {
            self[type](url, function (status) {
                status == "error" ? errors.push(url) : loaded.push(url) && s.each(url);
                checkProgress()
            }, "lazy-loaded-" + (s.name ? s.name : new Date().getTime()), s[type + "Key"] ? "?key=" + s[type + "Key"] : "")
        }

        function dispatchCallbacks(status) {
            clearTimeout(tTimeout);
            clearTimeout(cssTimeout);
            s.complete(status, loaded, errors);
            s[status](status == "error" ? errors : loaded)
        }

        function checkProgress() {
            if (loaded.length == files.length) {
                dispatchCallbacks("success")
            } else {
                if (loaded.length + errors.length == files.length) {
                    dispatchCallbacks("error")
                }
            }
        }

        function addError() {
            errors.push(this.src);
            checkProgress()
        }
    }
})(jQuery);